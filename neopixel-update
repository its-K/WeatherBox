#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>
#include <Adafruit_NeoPixel.h>

#define PIN        14 // On Trinket or Gemma, suggest changing this to 1
#define NUMPIXELS 24 // Popular NeoPixel ring size
const char* ssid = "K";
const char* password = "kingkise";
WiFiClient client;
MDNSResponder mdns;
ESP8266WebServer server(80);
const char INDEX_HTML[] =
"<!DOCTYPE HTML>"
"<html>"
"<head>"
"<meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0, maximum-scale = 1.0, user-scalable=0\">"
"<title>Weather Box</title>"
"<style>"
"\"body { background-color: #808080; font-family: Arial, Helvetica, Sans-Serif; Color: #000000; }\""
"</style>"
"</head>"
"<body>"
"<h1>ESP8266 Web Form Demo</h1>"
"<FORM action=\"/\" method=\"post\">"
"<P>"
"Automode<br>"
"<INPUT type=\"radio\" name=\"AUTOMODE\" value=\"1\">On<BR>"
"<INPUT type=\"radio\" name=\"AUTOMODE\" value=\"0\">Off<BR>"
"<input type='color' name='favcolor' value='#ff0000'><br><br>"
"<input type='text' name='firstname' value=''>"
"<INPUT type=\"submit\" value=\"Send\"> <INPUT type=\"reset\">"
"</P>"
"</FORM>"
"</body>"
"</html>";

const int LEDPIN = LED_BUILTIN;
String inp;
String LEDvalue="1";
String color;
unsigned long col,fin;

Adafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);

void handleRoot()
{
  if (server.hasArg("AUTOMODE")) {
    handleSubmit();
  }
  else {
    server.send(200, "text/html", INDEX_HTML);
  }
}

void returnFail(String msg)
{
  server.sendHeader("Connection", "close");
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(500, "text/plain", msg + "\r\n");
}

void handleSubmit()
{
  LEDvalue = server.arg("AUTOMODE");
  inp = server.arg("firstname");
  color = server.arg("favcolor");
  
  if (LEDvalue == "1") {
    digitalWrite(LEDPIN, LOW);
    server.send(200, "text/html", INDEX_HTML);
    Serial.println("Led on");
  }
  else if (LEDvalue == "0") {
    digitalWrite(LEDPIN, HIGH);
    Serial.println(inp);
    Serial.println(color);
    col = atol(color.c_str());
    server.send(200, "text/html", INDEX_HTML);
  }
  else {
    returnFail("Bad LED value");
  }
}

void returnOK()
{
  server.sendHeader("Connection", "close");
  server.sendHeader("Access-Control-Allow-Origin", "*");
  server.send(200, "text/plain", "OK\r\n");
}

void handleNotFound()
{
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET)?"GET":"POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i=0; i<server.args(); i++){
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
}


void setup()
{
  pinMode(LEDPIN, OUTPUT);
  digitalWrite(LEDPIN, LOW);
  Serial.begin(115200);
  WiFi.softAPdisconnect();
  WiFi.begin(ssid, password);
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
  

  if (mdns.begin("esp8266WebForm", WiFi.localIP())) {
    Serial.println("MDNS responder started");
  }

  server.on("/", handleRoot);
  server.onNotFound(handleNotFound);

  server.begin();
  Serial.print("Connect to http://esp8266WebForm.local or http://");
  Serial.println(WiFi.localIP());
    

}

void loop()
{
  server.handleClient();
   pixels.begin(); 
   if(col!=0)
   {
    fin=col;
   }
   change();
   }

void change()
{
  for(int i=0; i<NUMPIXELS ; i++) 
   { // For each pixel...
    
    pixels.setPixelColor(i, fin);
    pixels.show();   // Send the updated pixel colors to the hardware.
  delay(500);
  Serial.println(fin);
  }
}

