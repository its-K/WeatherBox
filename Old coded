#include <ESP8266WiFi.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <SPI.h>
#include <NTPClient.h>
#include <WiFiUdp.h>


const char* ssid     = "KISHORE";                 // SSID of local network
const char* password = "act@123456";                    // Password on network
String APIKEY = "84b9927477cbd1cd3f3cd586238f0fca";
String CityID = "1275339";

WiFiServer server(80);

WiFiClient client;
char servername[] = "api.openweathermap.org";            // remote server we will connect to
String result;

int  counter = 10;

String weatherDescription = "";
String weatherLocation = "";
String Country;
float Temperature;
float Humidity;
float Pressure;
float Sunrise;
float Sunset;
float Speed;
float Temp_min;
float Temp_max;
float Visibility;
float Wind_angle;

// Variable to store the HTTP request
String header;

// Auxiliar variables to store the current output state
String opmode = "on";

String fogmode = "off";
String sunmode = "off";
String rainmode = "off";
String lightmode = "off";


// Assign output variables to GPIO pins/////digital pins
const int output5 = 5;

const int output4 = 4;
const int output3 = 3;
const int output2 = 2;
const int output1 = 1;

const char* change="value";


// Current time
unsigned long currentTime = millis();
// Previous time
unsigned long previousTime = 0;
// Define timeout time in milliseconds (example: 2000ms = 2s)

const long timeoutTime = 2000;

unsigned long coun = 0;




/////////////////////////////////////// Setup //////////////////////////////



void setup()
{
  Serial.begin(115200);  // SERIAL
  pinMode(output5, OUTPUT);  //OUTPUT pins
  // Set outputs to LOW
  digitalWrite(output5, LOW);
  Serial.println("Connecting");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    {
      delay(1000);
    }
  }


  Serial.println("Connected");
  delay(1000);
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  server.begin();
}


void loop()
{
  coun++;
  WiFiClient client = server.available();   // Listen for incoming clients

  if (client)
  { // If a new client connects,
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    currentTime = millis();
    previousTime = currentTime;
    while (client.connected() && currentTime - previousTime <= timeoutTime)
    { // loop while the client's connected
      currentTime = millis();
      if (client.available())
      { // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n')
        { // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0)
          {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();




            //////////////////////////////////////////////////////////Buttons///////////////////////////
            // turns the GPIOs on and off
            if (header.indexOf("GET /5/on") >= 0) {
              Serial.println("Automode is on");
              opmode = "on";
              digitalWrite(output5, HIGH);
            } else if (header.indexOf("GET /5/off") >= 0) {
              Serial.println("Manual mode");
              opmode = "off";
              digitalWrite(output5, LOW);
            }

            else if (header.indexOf("GET /4/on") >= 0) {
              Serial.println("Fog mode is on");
              fogmode = "on";
              digitalWrite(output4, HIGH);
            } else if (header.indexOf("GET /4/off") >= 0) {
              Serial.println("Fog mode is off");
              fogmode = "off";
              digitalWrite(output4, LOW);
            }

            else if (header.indexOf("GET /3/on") >= 0) {
              Serial.println("Sun mode is on");
              sunmode = "on";
              digitalWrite(output3, HIGH);
            } else if (header.indexOf("GET /3/off") >= 0) {
              Serial.println("Sun mode is off");
              sunmode = "off";
              digitalWrite(output3, LOW);
            }

            else if (header.indexOf("GET /2/on") >= 0) {
              Serial.println("Rain mode is on");
              rainmode = "on";
              digitalWrite(output2, HIGH);
            } else if (header.indexOf("GET /2/off") >= 0) {
              Serial.println("Rain mode is off");
              rainmode = "off";
              digitalWrite(output2, LOW);
            }

            else if (header.indexOf("GET /1/on") >= 0) {
              Serial.println("Lightining on");
              lightmode = "on";
              digitalWrite(output1, HIGH);
            } else if (header.indexOf("GET /1/off") >= 0) {
              Serial.println("Lightining off");
              lightmode = "off";
              digitalWrite(output1, LOW);
            }
            /////////////////////////////////////////// Display the HTML web page///////////////////////////////////////////////////



            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the on/off buttons
            // Feel free to change the background-color and font-size attributes to fit your preferences
            client.println("<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}");
            client.println(".button { background-color: green; border: none; color: white; padding: 16px 40px;");
            client.println("text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}");
            client.println("</style></head>");

            // Web Page Heading
            client.println("<body><h1>TEMPOMETER</h1>");
            
            // Display current state, and ON/OFF buttons for GPIO 5
            client.println("<p>Current state= " + opmode + "</p>");
            // If the opmode is off, it displays the ON button
            if (opmode == "off") {
              client.println("<p><a href=\"/5/on\"><button class=\"button\">Automode</button></a></p>");
              client.println("<p><a href=\"/192.168.0.104\">kk</a></p>");
            } else {
              client.println("<p><a href=\"/5/off\"><button class=\"button button2\">Manual</button></a></p>");
            }

            client.println("<p>Current state= " + fogmode + "</p>");
            if (fogmode == "off") {
              client.println("<p><a href=\"/4/on\"><button class=\"button\">Fog Off</button></a></p>");

            } else {
              client.println("<p><a href=\"/4/off\"><button class=\"button button2\">Fog on</button></a></p>");
            }

            client.println("<p>Current state= " + sunmode + "</p>");
            if (sunmode == "off") {
              client.println("<p><a href=\"/3/on\"><button class=\"button\">Sun off</button></a></p>");

            } else {
              client.println("<p><a href=\"/3/off\"><button class=\"button button2\">Sun on</button></a></p>");
            }

            client.println("<p>Current state= " + rainmode + "</p>");
            if (rainmode == "off") {
              client.println("<p><a href=\"/2/on\"><button class=\"button\">Rain off</button></a></p>");

            } else {
              client.println("<p><a href=\"/2/off\"><button class=\"button button2\">Rain on</button></a></p>");
            }


            client.println("<p>Current state= " + lightmode + "</p>");
            if (lightmode == "off") {
              client.println("<p><a href=\"/1/on\"><button class=\"button\">Lightning on</button></a></p>");

            } else {
              client.println("<p><a href=\"/1/off\"><button class=\"button button2\">Lighting off</button></a></p>");
            }
            ////////////////////////////////// Display current state, and ON/OFF buttons for GPIO 4/////////////////////////


            client.println("</body></html>");

            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }

  while (opmode == "on")
  {
    automode();
    break;
  }
 

}

///////////////////////////////////////////AUTOMODE/////////////////////////////////////////////////////////






void automode()
{
  if (counter == 10)                                //Get new data every 10 minutes
  {
    counter = 0;
    delay(1000);
    getWeatherData();
    delay(1000);
  } else
  {
    counter++;
    displayWeather(weatherLocation, weatherDescription);
    delay(1000);
  }
}

void getWeatherData()                                //client function to send/receive GET request data.
{
  if (client.connect(servername, 80))
  { //starts client connection, checks for connection
    client.println("GET /data/2.5/weather?id=" + CityID + "&units=metric&APPID=" + APIKEY);
    client.println("Host: api.openweathermap.org");
    client.println("User-Agent: ArduinoWiFi/1.1");
    client.println("Connection: close");
    client.println();
  }
  else {
    Serial.println("connection failed");        //error message if no client connect
    Serial.println();
  }

  while (client.connected() && !client.available())
    delay(1);                                          //waits for data
  while (client.connected() || client.available())
  { //connected or data available
    char c = client.read();                     //gets byte from ethernet buffer
    result = result + c;
  }

  client.stop();                                      //stop client
  result.replace('[', ' ');
  result.replace(']', ' ');
  Serial.println(result);
  char jsonArray [result.length() + 1];
  result.toCharArray(jsonArray, sizeof(jsonArray));
  jsonArray[result.length() + 1] = '\0';
  StaticJsonBuffer<1024> json_buf;
  JsonObject &root = json_buf.parseObject(jsonArray);

  if (!root.success())
  {
    Serial.println("parseObject() failed");
  }

  String location = root["name"];
  String country = root["sys"]["country"];
  float temperature = root["main"]["temp"];
  float humidity = root["main"]["humidity"];
  String weather = root["weather"]["main"];
  String description = root["weather"]["description"];
  float pressure = root["main"]["pressure"];
  float sunrise = root["sys"]["sunrise"];
  float sunset = root["sys"]["sunset"];
  float temp_min = root["main"]["temp_min"];
  float temp_max = root["main"]["temp_max"];
  float speed = root["wind"]["speed"];
  float visibility = root["visibility"];
  float wind_angle = root["wind"]["deg"];
  weatherDescription = description;
  weatherLocation = location;
  Country = country;
  Temperature = temperature;
  Humidity = humidity;
  Pressure = pressure;
  Sunrise = sunrise;
  Sunset = sunset;
  Speed = speed;
  Temp_min = temp_min;
  Temp_max = temp_max;
  Visibility = visibility;
  Wind_angle = wind_angle;
}


////////////////////////////////////////////////////////////////////////Display weather details////////////////////////////////////////////

void displayWeather(String location, String description)
{
  Serial.println(description);
  delay(1000);
  /////////////////////////////////////////Smoke/////////////////////////////

  if ((description == "smoke" || description == "haze") && coun < 15)
  {
    smoke();
  }

  if (coun >= 16 && coun <= 26)
  {
    Serial.println("No comments");
  }

  if (coun >= 27)
  {
    coun = 0;
  }

  /////////////////////////////////////////////Sun///////////////////////////
  if (description == "sunny" || description == "sun")
  {
    sun();
  }
  //////////////////////////////////////////rain/////////////////////////////////
  if (description == "rain" || description == "raining")
  {
    rain();
  }

}

void smoke()
{
  Serial.println("Fog is on");
  rainmode="off";
  sunmode="off";
}

void sun()
{
  Serial.println("Sun  is on");
  fogmode="off";
  rainmode="off";
}

void rain()
{
  Serial.println("Rain is on");
  fogmode="off";
  sunmode="off";
}
